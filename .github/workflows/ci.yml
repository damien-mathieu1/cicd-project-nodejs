name: CI - Adonis
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'LICENSE.md'
      - 'PULL_REQUEST_TEMPLATE.md'
      - 'ISSUE_TEMPLATE.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'LICENSE.md'
      - 'PULL_REQUEST_TEMPLATE.md'
      - 'ISSUE_TEMPLATE.md'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.filter.outputs.code }}
      docker_changed: ${{ steps.filter.outputs.docker }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            code:
              - 'public/**'
              - 'resources/**'
              - 'start/**'
              - 'tests/**'
              - 'app/**'
              - 'bin/**'
              - 'app/**'
              - 'ace.js'
              - 'adonis'
              - 'config/**'
              - 'database/**'
              - 'package.json'
              - 'package-lock.json'
              - '.github/workflows/ci.yml'
            docker:
              - '**/Dockerfile'
              - 'docker-compose.yml'

  build-adonis:
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: needs.check-changes.outputs.code_changed == 'true'
    defaults:
      run:
        working-directory: ./

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build Project
        run: npm run build

  test-adonis:
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: needs.check-changes.outputs.code_changed == 'true'
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: root
          POSTGRES_DB: app
          POSTGRES_PASSWORD: root
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Wait for Postgres
        run: sleep 10
      - name: Test Project
        run: npm run test

  push-image:
    runs-on: ubuntu-latest
    needs: [test-adonis, check-changes, build-adonis] # Attendre que les tests passent avant de pousser
    if: needs.check-changes.outputs.docker_changed == 'true' || needs.check-changes.outputs.code_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container  # Utilisation du bon driver pour g√©rer le cache

      - name: Dockerhub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: damienmathieu/city-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          github-token: ${{ secrets.TOKEN_GITHUB }}

      - name: Run Trivy Scanner image for vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: damienmathieu/city-api:latest
          format: table
          exit-code: 1 # Fail the workflow if vulnerabilities are found
          severity: HIGH,CRITICAL

      - name: Push Docker image
        if: success() # Only push if the scan passes
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: damienmathieu/city-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          github-token: ${{ secrets.TOKEN_GITHUB }}
