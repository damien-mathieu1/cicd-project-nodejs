# CronJob for automatic cleanup of orphaned preprod environments
# This job runs every 5 minutes and cleans up namespaces that don't have a corresponding ArgoCD Application
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: preprod-cleanup
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: preprod-cleanup
rules:
  # Need to list Applications to find orphaned databases
  - apiGroups: ["argoproj.io"]
    resources: ["applications"]
    verbs: ["get", "list"]
  # Need to list namespaces to find preprod environments
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  # Need to exec into PostgreSQL pod to drop databases
  - apiGroups: [""]
    resources: ["pods", "pods/exec"]
    verbs: ["get", "list", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: preprod-cleanup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: preprod-cleanup
subjects:
  - kind: ServiceAccount
    name: preprod-cleanup
    namespace: default
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: preprod-cleanup
  namespace: default
spec:
  # Run every 5 minutes
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 300
      template:
        spec:
          serviceAccountName: preprod-cleanup
          restartPolicy: Never
          containers:
            - name: cleanup
              image: bitnami/kubectl:latest
              env:
                - name: POSTGRES_POD
                  value: "cicd-project-nodejs-postgresql-0"
                - name: POSTGRES_NAMESPACE
                  value: "default"
                - name: PGUSER
                  value: "root"
                - name: PGPASSWORD
                  value: "root"
              command:
                - sh
                - -c
                - |
                  set -e
                  echo "üîç Starting preprod database cleanup check..."

                  # Get list of all preprod databases from PostgreSQL
                  echo "üìã Fetching preprod databases from PostgreSQL..."
                  PREPROD_DBS=$(kubectl exec -n $POSTGRES_NAMESPACE $POSTGRES_POD -- sh -c "
                    PGPASSWORD=$PGPASSWORD psql -U $PGUSER -d postgres -tAc \"SELECT datname FROM pg_database WHERE datname LIKE 'app_preprod_pr_%';\"
                  " 2>/dev/null | tr -d ' ')

                  if [ -z "$PREPROD_DBS" ]; then
                    echo "‚úÖ No preprod databases found, nothing to clean"
                    exit 0
                  fi

                  echo "üìã Found preprod databases: $(echo $PREPROD_DBS | tr '\n' ' ')"

                  # Get list of active ArgoCD Applications
                  ARGOCD_APPS=$(kubectl get applications -n argocd -o name 2>/dev/null | grep "application/cicd-project-pr-" | sed 's|application/cicd-project-pr-||' || echo "")

                  echo "üìã Active ArgoCD Applications: $ARGOCD_APPS"

                  # Check each database
                  for db in $PREPROD_DBS; do
                    # Safety check: ensure it's really a preprod database (must start with app_preprod_pr_)
                    if ! echo "$db" | grep -q "^app_preprod_pr_"; then
                      echo "‚ö†Ô∏è Database $db does not match preprod pattern, skipping for safety"
                      continue
                    fi

                    # Extract PR number from database name (app_preprod_pr_X -> X)
                    PR_NUM=$(echo $db | sed 's/app_preprod_pr_//')

                    # Additional safety: PR number must be numeric
                    if ! echo "$PR_NUM" | grep -qE '^[0-9]+$'; then
                      echo "‚ö†Ô∏è Database $db has invalid PR number '$PR_NUM', skipping for safety"
                      continue
                    fi

                    # Check if there's a corresponding ArgoCD Application
                    if echo "$ARGOCD_APPS" | grep -q "^${PR_NUM}$"; then
                      echo "‚úÖ Database $db has active Application, skipping"
                    else
                      echo "üóëÔ∏è Database $db is orphaned..."

                      # Check if corresponding namespace exists
                      NS_NAME="preprod-pr-${PR_NUM}"
                      if kubectl get namespace $NS_NAME >/dev/null 2>&1; then
                        echo "‚è≥ Namespace $NS_NAME still exists, waiting for ArgoCD to delete it first"
                      else
                        echo "‚úÖ Namespace $NS_NAME does not exist, dropping database..."

                        # Drop the database
                        echo "üóÑÔ∏è Dropping database: $db"
                        kubectl exec -n $POSTGRES_NAMESPACE $POSTGRES_POD -- sh -c "
                          PGPASSWORD=$PGPASSWORD psql -U $PGUSER -d postgres -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$db';\" || true
                          PGPASSWORD=$PGPASSWORD psql -U $PGUSER -d postgres -c \"DROP DATABASE IF EXISTS $db;\"
                        " && echo "‚úÖ Database $db dropped" || echo "‚ö†Ô∏è Failed to drop database $db"
                      fi
                    fi
                  done

                  echo "üéâ Database cleanup check completed"
