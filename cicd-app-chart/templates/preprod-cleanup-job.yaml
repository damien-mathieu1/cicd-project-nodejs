{{- if and .Values.prNumber .Values.sharedPostgres }}
# Cleanup job for preprod environments
# This job runs BEFORE ArgoCD deletes the Application (PreDelete hook)
# It removes the preprod database from the shared PostgreSQL instance and deletes the namespace
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cicd-app-chart.fullname" . }}-cleanup-db
  labels:
    {{- include "cicd-app-chart.labels" . | nindent 4 }}
    app.kubernetes.io/component: cleanup
  annotations:
    # ArgoCD hook: run this job before deleting the application
    argocd.argoproj.io/hook: PreDelete
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "-1"
spec:
  ttlSecondsAfterFinished: 300  # Delete job 5 minutes after completion
  backoffLimit: 3
  template:
    metadata:
      name: {{ include "cicd-app-chart.fullname" . }}-cleanup-db
      labels:
        {{- include "cicd-app-chart.labels" . | nindent 8 }}
        app.kubernetes.io/component: cleanup
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "cicd-app-chart.fullname" . }}-cleanup
      initContainers:
        # Step 1: Clean up the database first
        - name: cleanup-db
          image: postgres:16
          env:
            - name: PGHOST
              value: "{{ .Values.sharedPostgres.host }}"
            - name: PGPORT
              value: "{{ .Values.sharedPostgres.port }}"
            - name: PGUSER
              value: "{{ .Values.sharedPostgres.auth.username }}"
            - name: PGPASSWORD
              value: "{{ .Values.sharedPostgres.auth.password }}"
            - name: PREPROD_DB
              value: "app_preprod_pr_{{ .Values.prNumber }}"
            - name: PGDATABASE
              value: "postgres"
          command:
            - sh
            - -c
            - |
              set -e
              echo "üßπ Cleaning up preprod database: $PREPROD_DB"

              # Check if database exists
              DB_EXISTS=$(psql -U $PGUSER -h $PGHOST -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$PREPROD_DB'")

              if [ "$DB_EXISTS" = "1" ]; then
                echo "üóëÔ∏è Dropping database: $PREPROD_DB"

                # Terminate all connections to the database
                psql -U $PGUSER -h $PGHOST -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$PREPROD_DB';"

                # Drop the database
                psql -U $PGUSER -h $PGHOST -d postgres -c "DROP DATABASE IF EXISTS $PREPROD_DB;"

                echo "‚úÖ Database $PREPROD_DB dropped successfully"
              else
                echo "‚ö†Ô∏è Database $PREPROD_DB does not exist, nothing to clean up"
              fi

              echo "üéâ Database cleanup completed"
      containers:
        # Step 2: Delete the namespace
        - name: cleanup-namespace
          image: bitnami/kubectl:latest
          env:
            - name: NAMESPACE
              value: "preprod-pr-{{ .Values.prNumber }}"
          command:
            - sh
            - -c
            - |
              set -e
              echo "üóëÔ∏è Deleting namespace: $NAMESPACE"

              # Delete the namespace
              kubectl delete namespace $NAMESPACE --ignore-not-found=true --timeout=60s

              echo "‚úÖ Namespace $NAMESPACE deleted successfully"
              echo "üéâ Full cleanup completed"
{{- end }}
