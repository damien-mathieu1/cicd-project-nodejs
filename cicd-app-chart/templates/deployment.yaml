apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cicd-app-chart.fullname" . }}
  labels:
    {{- include "cicd-app-chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "cicd-app-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cicd-app-chart.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cicd-app-chart.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .Values.prNumber .Values.sharedPostgres }}
      # Init container for preprod: creates and clones database
      initContainers:
        - name: init-db
          image: postgres:16
          env:
            - name: PGHOST
              value: "{{ .Values.sharedPostgres.host }}"
            - name: PGPORT
              value: "{{ .Values.sharedPostgres.port }}"
            - name: PGUSER
              value: "{{ .Values.sharedPostgres.auth.username }}"
            - name: PGPASSWORD
              value: "{{ .Values.sharedPostgres.auth.password }}"
            - name: PROD_DB
              value: "{{ .Values.sharedPostgres.auth.productionDatabase }}"
            - name: PREPROD_DB
              value: "app_preprod_pr_{{ .Values.prNumber }}"
          command:
            - sh
            - -c
            - |
              set -e
              echo "üîç Checking if preprod database exists..."

              # Check if database already exists
              DB_EXISTS=$(psql -U $PGUSER -h $PGHOST -tAc "SELECT 1 FROM pg_database WHERE datname='$PREPROD_DB'")

              if [ "$DB_EXISTS" = "1" ]; then
                echo "‚úÖ Database $PREPROD_DB already exists, skipping creation"
              else
                echo "üóÑÔ∏è Creating preprod database: $PREPROD_DB"
                psql -U $PGUSER -h $PGHOST -c "CREATE DATABASE $PREPROD_DB;"

                echo "üìã Cloning schema from production database: $PROD_DB"
                pg_dump -U $PGUSER -h $PGHOST --schema-only --no-owner --no-acl $PROD_DB | \
                  psql -U $PGUSER -h $PGHOST $PREPROD_DB

                echo "üì¶ Cloning data from production database: $PROD_DB"
                pg_dump -U $PGUSER -h $PGHOST --data-only --no-owner --no-acl $PROD_DB | \
                  psql -U $PGUSER -h $PGHOST $PREPROD_DB

                echo "‚úÖ Database $PREPROD_DB created and populated successfully"
              fi
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            - name: APP_KEY
              value: "{{ .Values.appKey }}"
            - name: NODE_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "info"
            - name: SESSION_DRIVER
              value: "cookie"
            - name: HOST
              value: "0.0.0.0"
            - name: PORT
              value: "{{ .Values.service.port }}"
            {{- if .Values.sharedPostgres }}
            # Preprod: connect to shared PostgreSQL
            - name: DB_HOST
              value: "{{ .Values.sharedPostgres.host }}"
            - name: DB_USER
              value: "{{ .Values.sharedPostgres.auth.username }}"
            - name: DB_PASSWORD
              value: "{{ .Values.sharedPostgres.auth.password }}"
            - name: DB_PORT
              value: "{{ .Values.sharedPostgres.port }}"
            - name: DB_DATABASE
              value: "app_preprod_pr_{{ .Values.prNumber }}"
            {{- else }}
            # Production: connect to dedicated PostgreSQL
            - name: DB_HOST
              value: "{{ .Release.Name }}-postgresql"
            - name: DB_USER
              value: "{{ .Values.postgresql.auth.username }}"
            - name: DB_PASSWORD
              value: "{{ .Values.postgresql.auth.password }}"
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: "{{ .Values.postgresql.auth.database }}"
            {{- end }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
